name: solar system workflow

on:
    workflow_dispatch:
    push:
        branches:
            - feature-branchA
            - main
env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME}}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD}}
jobs:
    unit-testing:
        name: unit testing
        strategy:
            matrix:
                nodejs_version: [18,19,20]
                os: [ubuntu-latest, macos-latest, windows-latest]

                exclude:
                    - nodejs_version: 18
                      os: macos-latest

        runs-on: ${{matrix.os}}


        steps:
            - name: checkout repo
              uses: actions/checkout@v5

            - name: Setup nodejs version - ${{matrix.nodejs_version}}
              uses: actions/setup-node@v4.4.0
              with:
                node-version: ${{matrix.nodejs_version}}

            - name: install dep
              run: npm install

            - name: unit testing
              id: NodeJs-unit-testing-step
              run: npm test

            - name: archive test result
              if: steps.NodeJs-unit-testing-step.outcome == 'failure' || steps.NodeJs-unit-testing-step.outcome == 'success'
              uses: actions/upload-artifact@v4.6.2
              with:
                name: mocha-test-result-${{matrix.nodejs_version}}-${{matrix.os}}
                path: test-results.xml


    code-coverage:
        name: code coverage
        needs: unit-testing
        runs-on: ubuntu-latest
        steps:
            - name: checkout repo
              uses: actions/checkout@v5

            - name: Setup nodejs version - 18
              uses: actions/setup-node@v4.4.0
              with:
                node-version: 18

            - name: install depend.
              run: npm install

            - name: check code coverage
              continue-on-error: true
              run: npm run coverage
            - name: archive covergae results
              uses: actions/upload-artifact@v4.6.2
              with:
                name: code-coverage-result
                path: coverage
                retention-days: 5


    
    docker:
        name: containerization
        needs: [code-coverage,unit-testing]
        permissions:
            packages: write
        runs-on: ubuntu-latest
        steps:
            - name: checkout
              uses: actions/checkout@v5

            - name: docker login
              uses: docker/login-action@v3.5.0
              with:
                username: ${{vars.DOCKERHUB_USERNAME}}
                password: ${{secrets.DOCKER_PASSWORD}}


            - name: GHCR login
              uses: docker/login-action@v3.5.0

              with:
                registry: ghcr.io
                username: ${{github.repository_owner}}
                password: ${{secrets.GITHUB_TOKEN}}


            - name: Build Docker file
              uses: docker/build-push-action@v6
              with : 
                push: false
                tags: ${{vars.DOCKERHUB_USERNAME}}/solar-system:latest

            - name: Test Docker image
              run: |
                docker images
                docker run --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                 ${{vars.DOCKERHUB_USERNAME}}/solar-system:latest
                 docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app

                 echo $IP

                 echo Testing Image URL using wget
                 wget -q -O - 127.0.0.1:3000/live | grep live


                
            - name: Set lowercase owner
              run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
                
            - name: Build Docker file
              uses: docker/build-push-action@v6
              with : 
                push: true
                tags: |
                  ${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest
                  ghcr.io/${{env.OWNER_LC }}/solar-system:latest

    terraform:
      needs: docker
      name: terrafrm-deployment
      runs-on: ubuntu-latest
      environment: production
      steps:
      - name: checkout repo
        uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Setup Terraform 
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: terraform init
        run: terraform init
        working-directory: ./terraform/team-01   

      - name: terraform plan
        run: terraform plan
        working-directory: ./terraform/team-01   

      - name: terraform apply
        run: terraform apply -auto-approve
        working-directory: ./terraform/team-01

    deploy:
      needs: terraform
      name: deploy to eks
      runs-on: ubuntu-latest

      steps:
          - name: checkout repo
            uses: actions/checkout@v5

          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4.3.1
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-1


          - name: update kubeconfig
            run: |
                  aws eks --region us-east-1 update-kubeconfig --name GP-cluster

          - name: Trigger app deployment
            uses: statsig-io/kubectl-via-eksctl@main
            env:
              aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              region: us-east-1
              cluster: GP-cluster

          - name: Deploy k8s deployments
            run: |
              kubectl apply -f deployment.yml
              kubectl apply -f service.yml
            working-directory: ./kubernetes



    deploy-monitoring:
      needs: deploy
      name: monitoring
      runs-on: ubuntu-latest
      env:
        AWS_REGION: us-east-1
        EKS_CLUSTER_NAME: GP-cluster
        GRAFANA_ADMIN_PASSWORD: $${{secrets.grafana_admin_password}}

      steps:
          - name: checkout repo
            uses: actions/checkout@v5

          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4.3.1
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-1


          - name: update kubeconfig
            run: |
                  aws eks --region us-east-1 update-kubeconfig --name GP-cluster

          - name: Trigger app deployment
            uses: statsig-io/kubectl-via-eksctl@main
            env:
              aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              region: us-east-1
              cluster: GP-cluster


          - name: create monitoring namespace
            run: kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

          - name: Add Helm repos
            run: |
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo add grafana https://grafana.github.io/helm-charts
              helm repo update

          - name: Render values with env
            run: |
              envsubst < values.yml > /tmp/values.rendered.yaml
              echo "Rendered values:"
              tail -n +1 /tmp/values.rendered.yaml
            working-directory: ./kubernetes


          # - name: Install/Upgrade kube-prometheus-stack
          #   run: |
          #     helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
          #     --namespace monitoring \
          #     --values /tmp_values.rendered.yaml \
          #     --wait --timeout 15m

          - name: Check cluster connectivity
            run: kubectl get pods -n monitoring

          - name: Install Prometheus
            run: |
              helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
              --namespace monitoring \
              --create-namespace \
              --timeout 15m

          - name: Install Grafana
            run: |
              helm upgrade --install grafana grafana/grafana \
              --namespace monitoring \
              --set adminPassword=admin \
              --wait \
              --timeout 15m

          - name: Apply ServiceMonitor for my app
            run: |
              kubectl apply -f servicemonitor-solar-system.yml
            working-directory: ./kubernetes

          - name: Show external endpoints
            run: |
              echo "Waiting for LoadBalancer IPs..."
              kubectl -n monitoring wait --for=condition=available deploy/kube-prometheus-stack-grafana --timeout=10m

              GRAFANA_URL=$(kubectl -n monitoring get svc kube-prometheus-stack-grafana -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              PROM_URL=$(kubectl -n monitoring get svc kube-prometheus-stack-prometheus -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

              echo "Grafana URL: http://$GRAFANA_URL" | tee -a $GITHUB_STEP_SUMMARY
              echo "Prometheus URL: http://$PROM_URL" | tee -a $GITHUB_STEP_SUMMARY